"use client";
import React from 'react';
import { PieChart, Pie, Tooltip, ResponsiveContainer, Cell } from 'recharts';
import { Card } from '@/components/ui/card'; // Asegúrate de importar el componente Card de la ubicación correcta
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { Download, MoveLeft } from 'lucide-react';
import { Button } from '@mui/material';
import { useRouter } from 'next/navigation';

const ViewAllTradesComponent = ({ pieDataDos }) => {
  const getMaxValue = (data) => {
    const max = data.reduce((prev, current) => (prev.value > current.value) ? prev : current);
    return max;
  };

  const getTopThreeValues = (data) => {
    console.log(data)
    const sortedData = [...data].sort((a, b) => b.value - a.value).slice(0, 3);
    console.log(sortedData)
    console.log(sortedData[0].value, sortedData[1].value, sortedData[2].value)
    const value = sortedData[0].value;
    if ((sortedData[0].value === value && sortedData[1].value === value && sortedData[2].value === value) ) {
      console.log("entra")
      return sortedData;
    } else 
    if (sortedData[0].value === value && sortedData[1].value === value) {
      console.log("entra")
      return sortedData.slice(0, 2);
    } else {
      console.log("entra")
      return sortedData.slice(0,1);
    }
  };

    let total=0;
    pieDataDos.forEach(data => {
      total = total + data.value;
    });

    console.log(total)

  const obtenerPorcentaje = (data) => {
    if (total === 0){
      console.log(data)
      return 0;
    }
    console.log(data)
    console.log(data * 100 / total)
    return (data * 100 / total).toFixed(2);
  }


  const generatePDF = () => {
    const doc = new jsPDF();

    // Agregar imagen (asegúrate de tener la imagen en formato base64)
    const imgPath = '/Oh_My_Boat_logo_1.png'

    // Fecha actual
    const currentDate = new Date().toLocaleDateString();

    // Añadir imagen
    doc.addImage(imgPath, 'PNG', 10, 10, 20, 20); // Ajusta las coordenadas y el tamaño según sea necesario

    // Añadir texto "oh my boat"
     // Añadir texto "Oh my boat"
     doc.setFontSize(12);
     doc.setFont('bold')
     doc.text("Oh my boat!", 33, 18); // Ajusta las coor

    // Añadir fecha a la derecha
    doc.setFontSize(12);
    doc.text(`La Plata, Fecha: ${currentDate}`, doc.internal.pageSize.width - 60, 20);

    // Añadir título centrado
    doc.setFontSize(16);
    doc.text("Reporte de Intercambios", doc.internal.pageSize.width / 2, 40, { align: 'center' });

    // Añadir tabla
    autoTable(doc, {
      startY: 50, // Ajusta esta coordenada para que la tabla se dibuje después del encabezado
      head: [['Tipo de intercambio', 'Intercambios', 'Porcentaje representativo']],
      body: pieDataDos.map(entry => [entry.name, entry.value, `${obtenerPorcentaje(entry.value)}%`]),
      foot: [[
        'Total de intercambios', 
        total, 
        (total === 0 ? '0%' : '100%'),
      ]]
    });

    doc.setFontSize(10);
    doc.text('Recuerde que todos los valores son aproximaciones y pueden estar simplificados.', 10, doc.autoTable.previous.finalY + 10);

    // Añadir footer
    doc.setFontSize(10);
    doc.text('Generated by TinchoTech Technology.', doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: 'center' });

    doc.save('reporte_intercambios.pdf');
  };
  const router = useRouter();
  const handleBack = () => {
    router.back();
  }
  return (
    <div className="flex items-center justify-center h-screen">
   
      <Card className="w-full  bg-white shadow-lg rounded-lg p-6">
      <button variant="ghost" className="hover:text-sky-500" onClick={handleBack}><MoveLeft height={20} width={20}/></button>
        <h1 className="text-2xl font-semibold mb-4 text-center">Intercambios populares</h1>
        <Button variant="contained" color="error" endIcon={<Download size={20}/>} onClick={generatePDF}>PDF </Button>
        {/* {total !== 0 && (
      <Button variant="contained" color="error" endIcon={<Download size={20}/>} onClick={generatePDF}>PDF </Button>
      )} */}
        { total === 0 ? (
          <h2 className="text-center text-gray-600">No hay datos para mostrar</h2>
        ) : (
          <div>
          <ResponsiveContainer width="100%" height={400}>
            <PieChart>
              <Pie
                dataKey="value"
                data={pieDataDos}
                cx="50%"
                cy="50%"
                outerRadius={80}
                fill="#8884d8"
                label={(entry) => entry.value !== 0 ? `${entry.name}: ${entry.value}` : ''}
              >
                {pieDataDos.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.fill} />
                ))}
              </Pie>
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
          { pieDataDos.length > 0 && (
            <p className="text-center mt-2 text-gray-700">
              {getTopThreeValues(pieDataDos).length === 1 ? (
                <>
                <div className='flex flex-col'>
                <span className='font-semibold text-lg'>Intercambio más popular</span> 
                <div>
                <span className='font-semibold text-blue-800'>
                    {getMaxValue(pieDataDos).name} ({getMaxValue(pieDataDos).value} intercambio/s):  
                  </span>
                  <span>
                    Representa del total ({total} intercambio/s) el {obtenerPorcentaje(getMaxValue(pieDataDos).value)}%
                  </span>
                </div>

                </div>
                    
                   

                
                </>
              ) : (
                <>
                  <h1 className='font-semibold text-lg'>Intercambios más populares:</h1>
                  {getTopThreeValues(pieDataDos).map((data, index) => (
                    <span key={index} className='flex'>
                      <span className='font-semibold text-blue-800'>{data.name}</span>: {data.value} intercambio/s
                      Representa del total ({total} intercambio/s) el {obtenerPorcentaje(data.value)}%
                    </span>
                  ))}
                </>
              )}

            </p>
            )}
          </div>
        )}

      </Card>
    </div>
  );
};

export default ViewAllTradesComponent;
